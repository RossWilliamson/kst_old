Index: kst/kst2drenderer.h
===================================================================
--- kst/kst2drenderer.h	(revision 0)
+++ kst/kst2drenderer.h	(revision 0)
@@ -0,0 +1,191 @@
+/***************************************************************************
+                kst2drenderer.h: base class for 2D rendering
+                             -------------------
+    begin                : October 9, 2005
+    copyright            : (C) 2005 Theodore Kisner
+    email                : tskisner.public@gmail.com
+ ***************************************************************************/
+
+/***************************************************************************
+ *                                                                         *
+ *   This program is free software; you can redistribute it and/or modify  *
+ *   it under the terms of the GNU General Public License as published by  *
+ *   the Free Software Foundation; either version 2 of the License, or     *
+ *   (at your option) any later version.                                   *
+ *                                                                         *
+ ***************************************************************************/
+
+#ifndef KST2DRENDERER_H
+#define KST2DRENDERER_H
+
+#include <qcolor.h>
+#include <qdom.h>
+#include <qpainter.h>
+#include <qwidget.h>
+
+#include <kdeversion.h>
+#if KDE_VERSION >= KDE_MAKE_VERSION(3,2,0)
+#include <kdemacros.h>
+#endif
+#include <kconfig.h>
+
+#include "kst_export.h"
+#include "kstmath.h"
+#include "kstsharedptr.h"
+#include "rwlock.h"
+#include "dpoint.h"
+
+/***********************************************************
+ This class is inherited by all 2D Renderers.  It defines a
+ generic 2D (U,V) coordinate system with an associated 
+ allowed and current range of both variables.
+   
+ After a QPainter is assigned to the _painter member, The size
+ of our pixel space region (_pSpace) is set to the full size
+ of the QPainter window (not viewport).  The size and location
+ of the pixel space rectangle can be restricted using the
+ setPSpace and getPSpace functions.
+ 
+ The current range in (U,V) space is mapped to the _pSpace
+ rectangle (in QPainter::window coordinates).  So when using
+ Pix2UV and UV2Pix, the pixel values are in QPainter window
+ coordinates.  In order to be valid, pixel window coordinates
+ must lie within the current _pSpace region.
+ ***********************************************************/
+
+class Kst2DRendererWidget;
+
+class KST_EXPORT Kst2DRenderer : public KstShared, public KstRWLock {
+  public:
+    Kst2DRenderer();
+    Kst2DRenderer(const QDomElement& e);
+    Kst2DRenderer(Kst2DRenderer& renderer);    
+    virtual ~Kst2DRenderer();
+
+    virtual void save(QTextStream& ts, const QString& indent = QString::null);
+    virtual void load(const QDomElement& e);
+
+    // set or get the current QPainter.  I think we need
+    // to use a pointer for _painter, not a reference, since 
+    // we want to be able to have the pointer undefined 
+    // at construction time.  This way we can call the 
+    // range checking functions even though the painter is not
+    // yet assigned. 
+    virtual void setPainter(QPainter* qp);
+    virtual QPainter* getPainter();
+    
+    // the maximum size of our pixel space is the full QPainter
+    // window.  use these functions to restrict the size of the 
+    // pixel space rectangle that is mapped to our current U/V
+    // range.
+    virtual void setPSpace(QRect pSpace);
+    virtual QRect getPSpace();
+    
+    // range methods in native (U,V) coordinates.
+    virtual void setRange(double uMin, double uMax, double vMin, double vMax);
+    virtual void getRange(double* uMin, double* uMax, double* vMin, double* vMax);
+    virtual void setValidRange(double uLow, double uHigh, double vLow, double vHigh);
+    virtual void getValidRange(double* uLow, double* uHigh, double* vLow, double* vHigh);
+    
+    // coordinate pair transformations.  given the (U,V) range
+    // and the current QPainter window, transform between them.
+    // Note that *every* in-range (U,V) point should be displayed
+    // and hence should have corresponding pixel window
+    // coordinates.  The converse is NOT necessarily true- some
+    // window pixels may lie outside the (U,V) plane given the
+    // current type of rendering.
+    
+    // if the (u,v) pair is out of range, or if _painter is 
+    // not yet assigned, return pixel coordinates of (-1,-1)
+    virtual void UV2Pix(double u, double v, int* xpix, int* ypix);
+    
+    // if the pixel location is outside the current _pSpace
+    // size, OR if the pixel lies outside the (U,V) space
+    // given the current range, OR if _painter is not yet
+    // assigned, then return (NaN,NaN)
+    virtual void Pix2UV(int xpix, int ypix, double* u, double* v);
+    
+    // check if the specified value is valid for this
+    // coordinate system.  if it is, return true, otherwise
+    // return false and suggest a replacement.
+    virtual bool isValidU(double u, double& alternate);
+    virtual bool isValidV(double v, double& alternate);
+    
+    // check if the specified value is currently in-range.
+    // if not, provide the best in-range value based on
+    // the requested one.
+    virtual bool inRangeU(double u, double& alternate);
+    virtual bool inRangeV(double v, double& alternate);
+    
+    // drawing primitives that work in native (U,V) coordinates.
+    // each method draws the necessary projection on the QPainter.
+    
+    virtual void drawPoint(double u, double v);
+    virtual void drawLine(double u1, double v1, double u2, double v2);
+    virtual void drawPolyLine(DPointArray* points); 
+    virtual void drawRect(double u, double v, double w, double h);
+    virtual void drawEllipse(double u, double v, double w, double h);
+    virtual void fillRect(double u, double v, double w, double h, const QBrush& brush);
+    
+    // drawing primitives that are centered at a point in
+    // (U,V) space, and which have a fixed size in pixels
+    
+    // radAngle is the orientation of the line in radians.  An
+    // angle of zero corresponds to 3 O'clock and increases in
+    // a counter-clockwise fashion
+    virtual void drawPixLine(double centerU, double centerV, double radAngle, int pixLength);
+    virtual void drawPixEllipse(double centerU, double centerV, int pixW, int pixH);
+
+  protected:
+    // the QPainter
+    QPainter* _painter;
+    
+    // this is the rectangular region, in QPainter::window
+    // coordinates, which is set to the full scale of the
+    // current U,V space range.  we do not draw beyond this
+    // region.
+    QRect _pSpace;
+    
+    // the current data range
+    double _uMin;
+    double _uMax;
+    double _vMin;
+    double _vMax;
+    
+    // the largest possible extent of the range.  If U and
+    // V can take any possible real value, set these to NaN.
+    double _uLow;
+    double _uHigh;
+    double _vLow;
+    double _vHigh;
+    
+};
+
+typedef KstSharedPtr<Kst2DRenderer> Kst2DRendererPtr;
+/*
+class Kst2DRendererWidget : public QWidget {
+  Q_OBJECT
+      friend class Kst2DRenderer;
+  public:
+    Kst2DRendererWidget(); // will be reparented later
+    virtual ~Kst2DRendererWidget();
+
+    virtual void setConfig(KConfig*);
+
+    void setInstance(Kst2DRendererPtr inst);
+    Kst2DRendererPtr instance() const;
+
+  public slots:
+    virtual void load();
+    virtual void save();
+
+  protected:
+    KConfig *_cfg;
+    // If _instance is nonzero, then your settings are to be saved for this
+    // particular instance of the source, as opposed to globally.
+    Kst2DRendererPtr _instance;
+};
+*/
+
+#endif
+// vim: ts=2 sw=2 et
Index: kst/Makefile.am
===================================================================
--- kst/Makefile.am	(revision 479632)
+++ kst/Makefile.am	(working copy)
@@ -22,6 +22,7 @@
 	ksdebug.cpp \
 	kstobject.cpp \
 	kstdatasource.cpp \
+	dpoint.cpp \
 	stdinsource.cpp \
 	kstextension.cpp \
 	kstdatacollection.cpp \
@@ -40,6 +41,7 @@
 libkstmath_la_SOURCES = \
 	labelparser.cpp \
 	kstdataobject.cpp \
+	kst2drenderer.cpp \
 	kstcsd.cpp \
 	kstpsd.cpp \
 	kstbasecurve.cpp \
Index: kst/dpoint.h
===================================================================
--- kst/dpoint.h	(revision 0)
+++ kst/dpoint.h	(revision 0)
@@ -0,0 +1,49 @@
+/***************************************************************************
+                dpoint.h: class for array of (U,V) points
+                             -------------------
+    begin                : October 21, 2005
+    copyright            : (C) 2005 Theodore Kisner
+    email                : tskisner.public@gmail.com
+ ***************************************************************************/
+
+/***************************************************************************
+ *                                                                         *
+ *   This program is free software; you can redistribute it and/or modify  *
+ *   it under the terms of the GNU General Public License as published by  *
+ *   the Free Software Foundation; either version 2 of the License, or     *
+ *   (at your option) any later version.                                   *
+ *                                                                         *
+ ***************************************************************************/
+
+#ifndef DPOINT_H
+#define DPOINT_H
+
+#include <qvaluevector.h>
+
+#include <kdeversion.h>
+#if KDE_VERSION >= KDE_MAKE_VERSION(3,2,0)
+#include <kdemacros.h>
+#endif
+
+#include "kst_export.h"
+
+class KST_EXPORT DPoint {
+  public:
+    DPoint();
+    DPoint(DPoint& dp);
+    DPoint(double u, double v);
+    DPoint& operator=(DPoint& dp);
+    void setUV(double u, double v);
+    void getUV(double& u, double& v);
+    double U();
+    double V();
+
+  private:
+    double _U;
+    double _V;
+};
+
+typedef QValueVector<DPoint> DPointArray;
+
+#endif
+// vim: ts=2 sw=2 et
Index: kst/dpoint.cpp
===================================================================
--- kst/dpoint.cpp	(revision 0)
+++ kst/dpoint.cpp	(revision 0)
@@ -0,0 +1,61 @@
+/***************************************************************************
+                dpoint.cpp: class for array of (U,V) points
+                             -------------------
+    begin                : October 21, 2005
+    copyright            : (C) 2005 Theodore Kisner
+    email                : tskisner.public@gmail.com
+ ***************************************************************************/
+
+/***************************************************************************
+ *                                                                         *
+ *   This program is free software; you can redistribute it and/or modify  *
+ *   it under the terms of the GNU General Public License as published by  *
+ *   the Free Software Foundation; either version 2 of the License, or     *
+ *   (at your option) any later version.                                   *
+ *                                                                         *
+ ***************************************************************************/
+
+#include "dpoint.h"
+
+DPoint::DPoint() {
+  _U = 0.0;
+  _V = 0.0;
+}
+
+DPoint::DPoint(DPoint& dp) {
+  _U = dp.U();
+  _V = dp.V();
+}
+    
+DPoint::DPoint(double u, double v) {
+  _U = u;
+  _V = v;
+}
+    
+DPoint& DPoint::operator=(DPoint& dp) {
+  if (this != &dp) {
+    _U = dp.U();
+    _V = dp.V();
+  }
+  return *this;
+}
+
+void DPoint::setUV(double u, double v) {
+  _U = u;
+  _V = v;
+}
+    
+void DPoint::getUV(double& u, double& v) {
+  u = _U;
+  v = _V;
+}
+    
+double DPoint::U() {
+  return _U;
+}
+
+double DPoint::V() {
+  return _V;
+}
+
+// vim: ts=2 sw=2 et
Index: kst/kst2drenderer.cpp
===================================================================
--- kst/kst2drenderer.cpp	(revision 0)
+++ kst/kst2drenderer.cpp	(revision 0)
@@ -0,0 +1,438 @@
+/***************************************************************************
+                kst2drenderer.cpp: base class for 2D rendering
+                             -------------------
+    begin                : October 9, 2005
+    copyright            : (C) 2005 Theodore Kisner
+    email                : tskisner.public@gmail.com
+ ***************************************************************************/
+
+/***************************************************************************
+ *                                                                         *
+ *   This program is free software; you can redistribute it and/or modify  *
+ *   it under the terms of the GNU General Public License as published by  *
+ *   the Free Software Foundation; either version 2 of the License, or     *
+ *   (at your option) any later version.                                   *
+ *                                                                         *
+ ***************************************************************************/
+
+#include "kst2drenderer.h"
+
+// The default behaviour of this base class is to do a simple
+// cartesian projection with U-->X and V-->Y.  The "real"
+// cartesian render class will likely want to add more private
+// members to configure things like axis display and reversal.
+
+Kst2DRenderer::Kst2DRenderer() : KstShared(), KstRWLock() {
+  _painter = NULL;
+  _pSpace.setRect(0,0,0,0);
+  _uMin = 0.0;
+  _uMax = 1.0;
+  _vMin = 0.0;
+  _vMax = 1.0;
+  _uLow = NAN;
+  _uHigh = NAN;
+  _vLow = NAN;
+  _vHigh = NAN;
+}
+
+Kst2DRenderer::Kst2DRenderer(const QDomElement& e) : KstShared(), KstRWLock() {
+  load(e);
+}
+
+Kst2DRenderer::Kst2DRenderer(Kst2DRenderer& renderer) : KstShared(), KstRWLock() {
+  double u1, u2, v1, v2;
+  _painter = renderer.getPainter();
+  _pSpace = renderer.getPSpace();
+  renderer.getValidRange(&u1, &u2, &v1, &v2);
+  setValidRange(u1, u2, v1, v2);
+  renderer.getRange(&u1, &u2, &v1, &v2);
+  setRange(u1, u2, v1, v2);
+}
+
+Kst2DRenderer::~Kst2DRenderer() {
+  
+}
+
+void Kst2DRenderer::save(QTextStream& ts, const QString& indent) {
+  ts << indent << "<ulow>" << _uLow << "</ulow>" << endl;
+  ts << indent << "<uhigh>" << _uHigh << "</uhigh>" << endl;
+  ts << indent << "<vlow>" << _vLow << "</vlow>" << endl;
+  ts << indent << "<vhigh>" << _vHigh << "</vhigh>" << endl;
+  ts << indent << "<umin>" << _uMin << "</umin>" << endl;
+  ts << indent << "<umax>" << _uMax << "</umax>" << endl;
+  ts << indent << "<vmin>" << _vMin << "</vmin>" << endl;
+  ts << indent << "<vmax>" << _vMax << "</vmax>" << endl;
+  ts << indent << "<pstop>" << _pSpace.top() << "</pstop>" << endl;
+  ts << indent << "<psleft>" << _pSpace.left() << "</psleft>" << endl;
+  ts << indent << "<pswidth>" << _pSpace.width() << "</pswidth>" << endl;
+  ts << indent << "<psheight>" << _pSpace.height() << "</psheight>" << endl;
+  return;
+}
+
+void Kst2DRenderer::load(const QDomElement& e) {
+  Q_UNUSED(e)
+  
+  return;
+}
+
+void Kst2DRenderer::setPainter(QPainter* qp) {
+  _painter = qp;
+  // check size of painter window and clip size of _pSpace
+  // if necessary
+  if (_painter) {
+    bool reset = false;
+    QRect window = _painter->window();
+    if (_pSpace.isValid()) { //adjust size
+      QRect temp = window.intersect(_pSpace);
+      if (temp.isValid()) {
+        _pSpace = temp;
+      } else {
+        reset = true;
+      }
+    } else { //set to QPainter window size
+      reset = true; 
+    }
+    if (reset) {
+      _pSpace = window;
+    }
+  }  
+  return;
+}
+
+QPainter* Kst2DRenderer::getPainter() {
+  return _painter;
+}
+    
+void Kst2DRenderer::setPSpace(QRect pSpace) {
+  _pSpace = pSpace;
+  // clip to QPainter window if necessary
+  if (_pSpace.isValid() && _painter) {
+    QRect window = _painter->window();
+    QRect temp = window.intersect(_pSpace);
+    if (temp.isValid()) {
+      _pSpace = temp;
+    } else {
+      _pSpace = window;
+    }
+  }
+  return;
+}
+
+QRect Kst2DRenderer::getPSpace() {
+  return _pSpace;
+}
+   
+void Kst2DRenderer::setRange(double uMin, double uMax, double vMin, double vMax) {
+  _uMin = uMin;
+  _uMax = uMax;
+  _vMin = vMin;
+  _vMax = vMax;
+  return;
+}
+
+void Kst2DRenderer::getRange(double* uMin, double* uMax, double* vMin, double* vMax) {
+  (*uMin) = _uMin;
+  (*uMax) = _uMax;
+  (*vMin) = _vMin;
+  (*vMax) = _vMax;
+  return;
+}
+
+void Kst2DRenderer::setValidRange(double uLow, double uHigh, double vLow, double vHigh) {
+  _uLow = uLow;
+  _uHigh = uHigh;
+  _vLow = vLow;
+  _vHigh = vHigh;
+  return;
+}
+
+void Kst2DRenderer::getValidRange(double* uLow, double* uHigh, double* vLow, double* vHigh) {
+  (*uLow) = _uLow;
+  (*uHigh) = _uHigh;
+  (*vLow) = _vLow;
+  (*vHigh) = _vHigh;
+  return;
+}
+    
+void Kst2DRenderer::UV2Pix(double u, double v, int* xpix, int* ypix) {
+  bool valid = false;
+  if (_pSpace.isValid()) {
+    double dummy;
+    if (inRangeU(u, dummy)) {
+      if (inRangeV(v, dummy)) {
+        int t, b, l, r;
+        _pSpace.coords(&l, &t, &r, &b);
+        valid = true;
+        (*xpix) = (int)(((u - _uMin)/(_uMax - _uMin)) * (double)(r - l)) + l;
+        (*ypix) = b - (int)(((v - _vMin)/(_vMax - _vMin)) * (double)(b - t));
+      }
+    }
+  }
+  if (!valid) {
+    (*xpix) = -1;
+    (*ypix) = -1;
+  }
+  return;
+}
+    
+void Kst2DRenderer::Pix2UV(int xpix, int ypix, double* u, double* v) {
+  bool valid = false;
+  if (_pSpace.isValid()) {
+    if (_pSpace.contains(xpix, ypix)) {
+      int t, b, l, r;
+      _pSpace.coords(&l, &t, &r, &b);
+      valid = true;
+      (*u) = ((double)(xpix - l)/(double)(r - l)) * (_uMax - _uMin) + _uMin;
+      (*v) = _vMax - ((double)(ypix - t)/(double)(b - t)) * (_vMax - _vMin);
+    }
+  }
+  if (!valid) {
+    (*u) = NAN;
+    (*v) = NAN;
+  }
+  return;
+}
+    
+bool Kst2DRenderer::isValidU(double u, double& alternate) {
+  if (!KST_ISNAN(_uLow)) { //range bounded on low end
+    if (u < _uLow) {
+      alternate = _uLow;
+      return false;
+    }
+  }
+  if (!KST_ISNAN(_uHigh)) { //range bounded on high end
+    if (u > _uHigh) {
+      alternate = _uHigh;
+      return false;
+    }
+  }
+  return true;
+}
+
+bool Kst2DRenderer::isValidV(double v, double& alternate) {
+  if (!KST_ISNAN(_vLow)) { //range bounded on low end
+    if (v < _vLow) {
+      alternate = _vLow;
+      return false;
+    }
+  }
+  if (!KST_ISNAN(_vHigh)) { //range bounded on high end
+    if (v > _vHigh) {
+      alternate = _vHigh;
+      return false;
+    }
+  }
+  return true;
+}
+    
+bool Kst2DRenderer::inRangeU(double u, double& alternate) {
+  double dummy;
+  if (isValidU(u, dummy)) {
+    if (u < _uMin) {
+      alternate = _uMin;
+      return false;
+    }
+    if (u > _uMax) {
+      alternate = _uMax;
+      return false;
+    }
+  } else {
+    alternate = _uMin;
+    return false;
+  }
+  return true;
+}
+
+bool Kst2DRenderer::inRangeV(double v, double& alternate) {
+  double dummy;
+  if (isValidV(v, dummy)) {
+    if (v < _vMin) {
+      alternate = _vMin;
+      return false;
+    }
+    if (v > _vMax) {
+      alternate = _vMax;
+      return false;
+    }
+  } else {
+    alternate = _vMin;
+    return false;
+  }
+  return true;
+}
+    
+void Kst2DRenderer::drawPoint(double u, double v) {
+  if (_painter) {
+    int x, y;
+    // find the pixel that contains (u,v) and draw
+    // the point there
+    UV2Pix(u, v, &x, &y);
+    if ((x >=0) && (y >=0)) {
+      _painter->drawPoint(x, y);
+    }
+  }
+  return;
+}
+
+void Kst2DRenderer::drawLine(double u1, double v1, double u2, double v2) {
+  if (_painter) {
+    int x1, y1, x2, y2;
+    // find the pixels that contain the endpoints and 
+    // draw the line between them
+    UV2Pix(u1, v1, &x1, &y1);
+    UV2Pix(u2, v2, &x2, &y2);
+    if ((x1 >=0) && (y1 >=0) && (x2 >=0) && (y2 >=0)) {
+      _painter->drawLine(x1, y1, x2, y2);
+    }
+  }
+  return;
+}
+
+void Kst2DRenderer::drawPolyLine(DPointArray* points) {
+  if (_painter) {
+    // Take each point in the DPointArray and find its
+    // location in pixel coordinates.  If a point is 
+    // invalid, skip over it.
+    double u, v;
+    int x, y;
+    QPointArray xypts;
+    int index = 0;
+    DPointArray::iterator current;
+    for (current = points->begin(); current != points->end(); ++current) {
+      u = current->U();
+      v = current->V();
+      UV2Pix(u, v, &x, &y);
+      if ((x >=0) && (y >=0)) {
+        xypts.setPoint(index, x, y);
+        index++;
+      }
+    }
+    _painter->drawPolyline(xypts);
+  }
+  return;
+}
+
+void Kst2DRenderer::drawRect(double u, double v, double w, double h) {
+  if (_painter) {
+    double bottom, right;
+    int x1, y1, x2, y2;
+    bottom = v - h;
+    right = u + w;
+    // find the pixels that contain the corners
+    UV2Pix(u, v, &x1, &y1);
+    UV2Pix(right, bottom, &x2, &y2);
+    if ((x1 >=0) && (y1 >=0) && (x2 >=0) && (y2 >=0)) {
+      _painter->drawRect(x1, y1, x2-x1, y2-y1);
+    }
+  }
+  return;
+}
+
+void Kst2DRenderer::drawEllipse(double u, double v, double w, double h) {
+  if (_painter) {
+    double bottom, right;
+    int x1, y1, x2, y2;
+    bottom = v - h;
+    right = u + w;
+    // find the pixels that contain the corners
+    UV2Pix(u, v, &x1, &y1);
+    UV2Pix(right, bottom, &x2, &y2);
+    if ((x1 >=0) && (y1 >=0) && (x2 >=0) && (y2 >=0)) {
+      _painter->drawEllipse(x1, y1, x2-x1, y2-y1);
+    }
+  }
+  return;
+}
+
+void Kst2DRenderer::fillRect(double u, double v, double w, double h, const QBrush& brush) {
+  if (_painter) {
+    double bottom, right;
+    int x1, y1, x2, y2;
+    bottom = v - h;
+    right = u + w;
+    // find the pixels that contain the corners
+    UV2Pix(u, v, &x1, &y1);
+    UV2Pix(right, bottom, &x2, &y2);
+    if ((x1 >=0) && (y1 >=0) && (x2 >=0) && (y2 >=0)) {
+      _painter->fillRect(x1, y1, x2-x1, y2-y1, brush);
+    }
+  }
+  return;  
+}
+    
+void Kst2DRenderer::drawPixLine(double centerU, double centerV, double radAngle, int pixLength) {
+  if (_painter) {
+    int cx, cy, x1, y1, x2, y2;
+    // find the pixel at the center and then compute the
+    // endpoints in pixel space
+    UV2Pix(centerU, centerV, &cx, &cy);
+    if ((cx >=0) && (cy >=0)) {
+      // make sure angle is in [0..PI)
+      while (radAngle < 0.0) {
+        radAngle += M_PI;
+      }
+      while (radAngle > M_PI) {
+        radAngle -= M_PI;
+      }
+      x1 = cx - (int)(((double)pixLength/2.0)*cos(radAngle));
+      x2 = cx + (int)(((double)pixLength/2.0)*cos(radAngle));
+      y1 = cy + (int)(((double)pixLength/2.0)*sin(radAngle));
+      y2 = cy - (int)(((double)pixLength/2.0)*sin(radAngle));
+      _painter->drawLine(x1, y1, x2, y2);
+    }
+  }
+  return;
+}
+
+void Kst2DRenderer::drawPixEllipse(double centerU, double centerV, int pixW, int pixH) {
+  if (_painter) {
+    int cx, cy, x, y;
+    // find the pixel at the center and then compute the
+    // top left corner in pixel space
+    UV2Pix(centerU, centerV, &cx, &cy);
+    if ((cx >=0) && (cy >=0)) {
+      x = cx - (int)(pixW/2);
+      y = cy - (int)(pixH/2);
+      _painter->drawEllipse(x, y, pixW, pixH);
+    }
+  }
+  return;
+}
+
+/* Kst2DRendererWidget */
+/*
+Kst2DRendererWidget::Kst2DRendererWidget()
+  : QWidget(0L), _cfg(0L) {
+  }
+
+
+  Kst2DRendererWidget::~Kst2DRendererWidget() {
+  }
+
+
+  void Kst2DRendererWidget::save() {
+  }
+
+
+  void Kst2DRendererWidget::load() {
+  }
+
+
+  void Kst2DRendererWidget::setConfig(KConfig *cfg) {
+    _cfg = cfg;
+  }
+
+
+  void Kst2DRendererWidget::setInstance(Kst2DRendererPtr inst) {
+    _instance = inst;
+  }
+
+
+  Kst2DRendererPtr Kst2DRendererWidget::instance() const {
+    return _instance;
+  }
+  
+#include "kst2drenderer.moc"
+*/
+
+// vim: ts=2 sw=2 et
