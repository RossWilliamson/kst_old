Index: src/flush.c
===================================================================
--- src/flush.c	(Revision 492)
+++ src/flush.c	(Arbeitskopie)
@@ -26,7 +26,6 @@
 #include <errno.h>
 #include <sys/types.h>
 #include <sys/stat.h>
-#include <unistd.h>
 #include <time.h>
 #include <limits.h>
 #endif
@@ -716,6 +715,7 @@
   return (D->error == GD_E_OK) ? 0 : -1;
 }
 
+#ifndef _MSC_VER
 #define GD_VERS_GE_1  0xFFFFFFFFFFFFFFFELLU
 #define GD_VERS_GE_2  0xFFFFFFFFFFFFFFFCLLU
 #define GD_VERS_GE_3  0xFFFFFFFFFFFFFFF8LLU
@@ -734,7 +734,29 @@
 #define GD_VERS_LE_6  0x000000000000007fLLU
 #define GD_VERS_LE_7  0x00000000000000ffLLU
 #define GD_VERS_LE_8  0x00000000000001ffLLU
+#else
+// TODO no long long
+#define GD_VERS_GE_1  0xFFFFFFFFFFFFFFFELU
+#define GD_VERS_GE_2  0xFFFFFFFFFFFFFFFCLU
+#define GD_VERS_GE_3  0xFFFFFFFFFFFFFFF8LU
+#define GD_VERS_GE_4  0xFFFFFFFFFFFFFFF0LU
+#define GD_VERS_GE_5  0xFFFFFFFFFFFFFFE0LU
+#define GD_VERS_GE_6  0xFFFFFFFFFFFFFFC0LU
+#define GD_VERS_GE_7  0xFFFFFFFFFFFFFF80LU
+#define GD_VERS_GE_8  0xFFFFFFFFFFFFFF00LU
 
+#define GD_VERS_LE_0  0x0000000000000001LU
+#define GD_VERS_LE_1  0x0000000000000003LU
+#define GD_VERS_LE_2  0x0000000000000007LU
+#define GD_VERS_LE_3  0x000000000000000fLU
+#define GD_VERS_LE_4  0x000000000000001fLU
+#define GD_VERS_LE_5  0x000000000000003fLU
+#define GD_VERS_LE_6  0x000000000000007fLU
+#define GD_VERS_LE_7  0x00000000000000ffLU
+#define GD_VERS_LE_8  0x00000000000001ffLU
+#endif
+
+
 uint64_t _GD_FindVersion(DIRFILE *D)
 {
   unsigned int i;
Index: src/putdata.c
===================================================================
--- src/putdata.c	(Revision 492)
+++ src/putdata.c	(Arbeitskopie)
@@ -528,7 +528,7 @@
         D->fragment[E->fragment_index].cname);
   else {
     gd_type_t type = _GD_ConstType(D, E->EN(scalar,const_type));
-    _GD_ConvertType(D, data_in, data_type, E->e->u.scalar.d + first *
+    _GD_ConvertType(D, data_in, data_type, (char*)(E->e->u.scalar.d) + first *
         GD_SIZE(type), type, len);
   }
 
Index: src/parse.c
===================================================================
--- src/parse.c	(Revision 492)
+++ src/parse.c	(Arbeitskopie)
@@ -88,6 +88,11 @@
   return t;
 }
 
+#ifdef _MSC_VER
+//TODO no long long 
+_gd_int64_t strtoull(const char* str, char** endptr, int base) { return 0; }
+#endif
+
 /* Returns a newly malloc'd string containing the scalar field name, or NULL on
  * numeric literal or error */
 static char* _GD_SetScalar(DIRFILE* D, const char* token, void* data, int type,
Index: src/mod.c
===================================================================
--- src/mod.c	(Revision 492)
+++ src/mod.c	(Arbeitskopie)
@@ -30,6 +30,10 @@
 #include <libgen.h>
 #endif
 
+#ifdef max
+#undef max
+#endif
+
 static unsigned int max(unsigned int A, unsigned int B)
 {
   return (A > B) ? A : B;
Index: src/internal.h
===================================================================
--- src/internal.h	(Revision 492)
+++ src/internal.h	(Arbeitskopie)
@@ -27,12 +27,33 @@
 #endif
 
 #include "getdata.h"
+
+#ifdef HAVE_UNISTD_H
+#include <unistd.h>
+#endif
+
+#ifdef HAVE_STDINT_H
+#include <stdint.h>
+#endif
+
 #include <string.h>
+#include <errno.h>
+#include <fcntl.h>
 
 #ifdef __APPLE__
 typedef off_t off64_t;
 #endif
 
+#ifdef _MSC_VER
+typedef size_t ssize_t;
+typedef int mode_t;
+#define fsync _commit
+#define snprintf _snprintf
+#define S_ISREG(m) (((m) & S_IFMT) == S_IFREG)
+#define S_ISDIR(m) (((m) & S_IFMT) == S_IFDIR)
+#endif
+
+
 #ifdef GD_NO_C99_API
 #  define GD_DCOMPLEXP_t double *
 #  define GD_DCOMPLEXA(v) double v[2]
@@ -122,7 +143,11 @@
 # define __wur
 #endif
 
+#ifdef _MSC_VER
+#define __gd_unused
+#else
 #define __gd_unused __attribute__ (( unused ))
+#endif
 
 /* disable the "unspecified order" remark in ICC */
 #ifdef __INTEL_COMPILER
@@ -254,18 +279,25 @@
 #endif
 
 #if defined __CYGWIN__ || defined __APPLE__
-#  define gd_stat64 stat
-#elif HAVE_STAT64
+#define HAVE_NO_STAT64
+#define HAVE_NO_STRUCT_STAT64
+#endif
+
+#if HAVE_STAT64
 #  define gd_stat64 stat64
 #elif HAVE__STAT64
 #  define gd_stat64 _stat64
+#elif HAVE_NO_STAT64
+#  define gd_stat64 stat
 #endif
 
 #if HAVE_STRUCT_STAT64
 typedef struct stat64 gd_stat64_t;
+#elif HAVE_STRUCT__STAT64
+typedef struct _stat64 gd_stat64_t;
 #elif HAVE_STRUCT___STAT64
 typedef struct __stat64 gd_stat64_t;
-#elif defined __CYGWIN__ || defined __APPLE__
+#elif HAVE_NO_STRUCT_STAT64
 typedef struct stat gd_stat64_t;
 #endif
 
@@ -719,7 +751,13 @@
 int _GD_SlimClose(struct _gd_raw_file* file);
 off64_t _GD_SlimSize(struct _gd_raw_file* file, gd_type_t data_type);
 
-static inline int entry_cmp(const void *a, const void *b)
+#ifdef _MSC_VER
+#define _gd_static_inline static
+#else
+#define _gd_static_inline static inline
+#endif
+
+_gd_static_inline int entry_cmp(const void *a, const void *b)
 {
   return strcmp((*(gd_entry_t**)a)->field, (*(gd_entry_t**)b)->field);
 }
Index: src/getdata.h.in
===================================================================
--- src/getdata.h.in	(Revision 492)
+++ src/getdata.h.in	(Arbeitskopie)
@@ -52,14 +52,20 @@
 /* The most recent standards version supported by this library */
 #define GD_DIRFILE_STANDARDS_VERSION 8
 
+#include <math.h>
+
 /* one or more of these should give us:
  *    size_t, off_t, __REDIRECT, &c., if present
  */
 #include <sys/types.h>
-#include <unistd.h>
 
+
+
+
 /* If this symbol is defined here, the C99-API is not present in the library */
+#if @GD_ENABLE_C99_API@
 #undef GD_NO_C99_API
+#endif
 
 #if defined(GD_NO_C99_API) && ! defined(GD_C89_API)
 # define GD_C89_API
@@ -228,6 +234,11 @@
 #undef _gd_int16_t
 #undef _gd_uint16_t
 #undef _gd_int64_t
+#ifdef _MSC_VER 
+typedef short _gd_int16_t;
+typedef unsigned short _gd_uint16_t;
+typedef __int64 _gd_int64_t;
+#endif
 #if ! defined GD_C89_API
 #  include <inttypes.h>
 #  define GD_DCOMPLEXM(v) double _Complex v
Index: src/raw.c
===================================================================
--- src/raw.c	(Revision 492)
+++ src/raw.c	(Arbeitskopie)
@@ -24,7 +24,7 @@
 #include <stdlib.h>
 #include <sys/stat.h>
 #include <sys/types.h>
-#include <unistd.h>
+
 #include <fcntl.h>
 #include <errno.h>
 #endif
