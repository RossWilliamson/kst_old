# C linkage is default
AC_C_BIGENDIAN
AC_PROG_YACC
AM_PROG_LEX
dnl AC_OUTPUT(kst/kst.spec kst/kst.lsm)

AC_CHECK_UNSETENV

AC_HEADER_TIME
AC_CHECK_HEADERS(sys/time.h)

KST_VERSION="1.4.0_devel"
KST_LIBKST_VERSION=1:4:0

AC_SUBST([KST_VERSION])
AC_SUBST([KST_LIBKST_VERSION])
AC_DEFINE_UNQUOTED([KSTVERSION], ["${KST_VERSION}"], [Define to the KST version number])

# PIOLIB Test
ac_piolib_includes=""
ac_piolib_libraries=""
AC_ARG_WITH(piolib,
    AC_HELP_STRING([--with-piolib=DIR],[where the root of PIOLib is installed ]),
    [  ac_piolib_includes="-I$withval"
       ac_piolib_libraries="-L$withval"
    ])

all_includes_save="$all_includes"
all_includes="$all_includes $ac_piolib_includes"
KDE_CHECK_HEADER(HL2_PIOLIB/PIOLib.h, AC_DEFINE(HAVE_PIOLIB_H, 1, [If we have piolib headers]) have_piolib_h=yes PIOINCLUDES="$ac_piolib_includes", , )
all_includes="$all_includes_save"

ldflags_save="$LDFLAGS"
LDFLAGS="$LDFLAGS $ac_piolib_libraries"
KDE_CHECK_LIB(piolib, PIOGetObjectList, PIOLIBS="$ac_piolib_libraries -lpiolib $PIOLIBS", , -lm -lpthread -ldl)
LDFLAGS="$ldflags_save"

if test "x$ac_cv_lib_piolib_PIOGetObjectList" = "xyes"; then
  if test "x$have_piolib_h" = "xyes"; then
    AC_SUBST(PIOLIBS)
    AC_SUBST(PIOINCLUDES)
    AC_DEFINE(KST_HAVE_PLANCK, 1, [If we have the PLANCK I/O libraries.])
  fi
fi

AM_CONDITIONAL(include_piolib, test -n "$PIOLIBS")


# LIBNAD Test
ac_nad_includes=""
ac_nad_libraries=""
AC_ARG_WITH(nad,
    AC_HELP_STRING([--with-nad=DIR],[where the root of NAD is installed ]),
    [  ac_nad_includes="-I$withval/include"
       ac_nad_libraries="-L$withval/lib"
    ])

all_includes_save="$all_includes"
all_includes="$all_includes $ac_nad_includes"
KDE_CHECK_HEADER(nad.h, AC_DEFINE(HAVE_NAD_H, 1, [If we have nad headers]) have_nad_h=yes NADINCLUDES="$ac_nad_includes", , )
all_includes="$all_includes_save"

ldflags_save="$LDFLAGS"
LDFLAGS="$LDFLAGS $ac_nad_libraries"
KDE_CHECK_LIB(nad, NADVERSION, NADLIBS="$ac_nad_libraries -lnad -lcurl $NADLIBS", , -lm -lpthread -ldl -lcurl -lqt-mt)
LDFLAGS="$ldflags_save"

if test "x$ac_cv_lib_nad_NADVERSION" = "xyes"; then
  if test "x$have_nad_h" = "xyes"; then
    AC_SUBST(NADLIBS)
    AC_SUBST(NADINCLUDES)
    AC_DEFINE(KST_HAVE_NAD, 1, [If we have the NAD libraries.])
  fi
fi

AM_CONDITIONAL(include_nad, test -n "$NADLIBS")


# Transfer function test
ac_transfunc_includes=""
ac_transfunc_libraries=""
AC_ARG_WITH(transfunc,
    AC_HELP_STRING([--with-transfunc=DIR],[where the root of libtransfunc is installed ]),
    [  ac_transfunc_includes="-I$withval"
       ac_transfunc_libraries="-L$withval"
    ])

if test "x$ac_cv_lib_piolib_PIOGetObjectList" = "xyes"; then
  if test "x$have_piolib_h" = "xyes"; then
    all_includes_save="$all_includes"
    all_includes="$all_includes $ac_transfunc_includes $PIOINCLUDES"
    KDE_CHECK_HEADER(HL2_TransfertFunction/FT.h, AC_DEFINE(HAVE_FT_H, 1, [If we have transfunc headers]) have_FT_h=yes TFINCLUDES="$ac_transfunc_includes", , )
    all_includes="$all_includes_save"

    ldflags_save="$LDFLAGS"
    LDFLAGS="$LDFLAGS $ac_transfunc_libraries"
    KDE_CHECK_LIB(transfunc, HCTtransf1, TRANSFUNCS="$ac_transfunc_libraries -ltransfunc $TRANSFUNCS", , -lm -ldl -lpthread $PIOLIBS)
    LDFLAGS="$ldflags_save"

    if test "x$ac_cv_lib_transfunc_HCTtransf1" = "xyes"; then
      if test "x$have_FT_h" = "xyes"; then
        AC_SUBST(TRANSFUNCS)
        AC_SUBST(TFINCLUDES)
        AC_DEFINE(KST_HAVE_TRANSFUNCS, 1, [If we have the transfunc library.])
      fi
    fi
  fi
fi


# CDF Test
ac_cdf_includes=""
ac_cdf_libraries=""
AC_ARG_WITH(cdf,
    AC_HELP_STRING([--with-cdf=DIR],[where the root of CDF is installed ]),
    [  ac_cdf_includes="-I$withval/include"
       ac_cdf_libraries="-L$withval/lib"
    ])

all_includes_save="$all_includes"
all_includes="$all_includes $ac_cdf_includes"
KDE_CHECK_HEADER(cdf.h, AC_DEFINE(HAVE_CDF_H, 1, [If we have CDF headers]) have_cdf_h=yes CDFINCLUDES="$ac_cdf_includes", , )
all_includes="$all_includes_save"

ldflags_save="$LDFLAGS"
LDFLAGS="$LDFLAGS $ac_cdf_libraries"
KDE_CHECK_LIB(cdf, CDFlib, CDFLIBS="$ac_cdf_libraries -lcdf $CDFLIBS", , )
LDFLAGS="$ldflags_save"

if test "x$ac_cv_lib_cdf_CDFlib" = "xyes"; then
  if test "x$have_cdf_h" = "xyes"; then
    AC_SUBST(CDFLIBS)
    AC_SUBST(CDFINCLUDES)
    AC_DEFINE(KST_HAVE_CDF, 1, [If we have the CDF libraries.])
  fi
fi

AM_CONDITIONAL(include_cdf, test -n "$CDFLIBS")


# netCDF Test
ac_netcdf_includes=""
ac_netcdf_libraries=""
AC_ARG_WITH(netcdf,
    AC_HELP_STRING([--with-netcdf=DIR],[where the root of NetCDF is installed ]),
    [  ac_netcdf_includes="-I$withval/include"
       ac_netcdf_libraries="-L$withval/lib"
    ])
AC_ARG_WITH(nonetcdf,
    AC_HELP_STRING([--without-netcdf],[disable NetCDF support]),[build_netcdf=no],[build_netcdf=maybe])

if test "$build_netcdf" = "maybe"; then
  all_includes_save="$all_includes"
  all_includes="$all_includes $ac_netcdf_includes"
  KDE_CHECK_HEADER(netcdfcpp.h, AC_DEFINE(HAVE_NETCDFCPP_H, 1, [If we have NetCDF CPP headers]) have_netcdfcpp_h=yes NETCDFINCLUDES="$ac_netcdf_includes", , )
  all_includes="$all_includes_save"

  ldflags_save="$LDFLAGS"
  LDFLAGS="$LDFLAGS $ac_netcdf_libraries"
  KDE_CHECK_LIB(netcdf, nc_open, NETCDFLIBS="$ac_netcdf_libraries -lnetcdf_c++ -lnetcdf $NETCDFLIBS", , )
  LDFLAGS="$ldflags_save"

  if test "x$ac_cv_lib_netcdf_nc_open" = "xyes"; then
    if test "x$have_netcdfcpp_h" = "xyes"; then
      AC_SUBST(NETCDFLIBS)
      AC_SUBST(NETCDFINCLUDES)
      AC_DEFINE(KST_HAVE_NETCDF, 1, [If we have the NetCDF libraries.])
    fi
  fi
fi

AM_CONDITIONAL(include_netcdf, test -n "$NETCDFLIBS")

# Readline and ncurses check
KDE_CHECK_HEADER(readline/readline.h, AC_DEFINE(HAVE_READLINE_H, 1, [If we have libreadline headers]) have_readline_h=yes, , )
KDE_CHECK_LIB(readline, rl_cleanup_after_signal, LIBREADLINE="-lreadline -lncurses", , -lncurses)
if test "x$ac_cv_lib_readline_rl_cleanup_after_signal" = "xyes"; then
  if test "x$have_readline_h" = "xyes"; then
    AC_SUBST(LIBREADLINE)
    AC_DEFINE(KST_HAVE_READLINE, 1, [If we have libreadline.])
  else
    AC_MSG_WARN([kstcmd will not be compiled. Please install readline and ncurses])
  fi
else
  AC_MSG_WARN([kstcmd will not be compiled. Please install readline and ncurses])
fi
AM_CONDITIONAL(include_kstcmd, test $have_readline_h = yes -a $ac_cv_lib_readline_rl_cleanup_after_signal = yes)

# GSL Tests
GSL_LIBS="-lgsl -lgslcblas -lm"
AC_SUBST(GSL_LIBS)
GSL_NOISE_SUBDIR="gsl"
GSL_FITS_SUBDIR="gsl"
GSL_FITSNONLINEAR_SUBDIR="gsl"
GSL_INTERPOLATIONS_SUBDIR="gsl"
GSL_PASS_FILTERS_SUBDIR="gsl"
GSL_CONVOLUTION_SUBDIR="gsl"
GSL_CORRELATION_SUBDIR="gsl"
GSL_RANA_SUBDIR="gsl"
KDE_CHECK_HEADER(gsl/gsl_rng.h, ,[GSL_NOISE_SUBDIR=""] )
KDE_CHECK_LIB(gsl, gsl_rng_alloc, ,[GSL_NOISE_SUBDIR=""], -lgslcblas -lm )
KDE_CHECK_HEADER(gsl/gsl_fit.h, ,[GSL_FITS_SUBDIR=""] )
KDE_CHECK_LIB(gsl, gsl_fit_linear, ,[GSL_FITS_SUBDIR=""], -lgslcblas -lm )
KDE_CHECK_HEADER(gsl/gsl_multifit_nlin.h, ,[GSL_FITSNONLINEAR_SUBDIR=""] )
KDE_CHECK_LIB(gsl, gsl_multifit_fdfsolver_alloc, ,[GSL_FITSNONLINEAR_SUBDIR=""], -lgslcblas -lm )
KDE_CHECK_HEADER(gsl/gsl_spline.h, ,[GSL_INTERPOLATIONS_SUBDIR=""] )
KDE_CHECK_LIB(gsl, gsl_interp_init, ,[GSL_INTERPOLATIONS_SUBDIR=""], -lgslcblas -lm )
KDE_CHECK_HEADER(gsl/gsl_fft_real.h, ,[GSL_PASS_FILTERS_SUBDIR=""] )
KDE_CHECK_LIB(gsl, gsl_fft_real_wavetable_alloc, ,[GSL_PASS_FILTERS_SUBDIR=""], -lgslcblas -lm )
KDE_CHECK_HEADER(gsl/gsl_fft_real.h, ,[GSL_CONVOLUTION_SUBDIR=""] )
KDE_CHECK_LIB(gsl, gsl_fft_real_wavetable_alloc, ,[GSL_CONVOLUTION_SUBDIR=""], -lgslcblas -lm )
KDE_CHECK_HEADER(gsl/gsl_fft_real.h, ,[GSL_CORRELATION_SUBDIR=""] )
KDE_CHECK_LIB(gsl, gsl_fft_real_wavetable_alloc, ,[GSL_CORRELATION_SUBDIR=""], -lgslcblas -lm )
KDE_CHECK_HEADER(gsl/gsl_fit.h, ,[GSL_RANA_SUBDIR=""] )
KDE_CHECK_LIB(gsl, gsl_fit_linear, ,[GSL_RANA_SUBDIR=""], -lgslcblas -lm )
AM_CONDITIONAL(include_noise_plugins, test -n "$GSL_NOISE_SUBDIR")
AM_CONDITIONAL(include_fits_plugins, test -n "$GSL_FITS_SUBDIR")
AM_CONDITIONAL(include_fitsnonlinear_plugins, test -n "$GSL_FITSNONLINEAR_SUBDIR")
AM_CONDITIONAL(include_interpolations_plugins, test -n "$GSL_INTERPOLATIONS_SUBDIR")
AM_CONDITIONAL(include_pass_filters_plugins, test -n "$GSL_PASS_FILTERS_SUBDIR")
AM_CONDITIONAL(include_convolution_plugins, test -n "$GSL_CONVOLUTION_SUBDIR")
AM_CONDITIONAL(include_correlation_plugins, test -n "$GSL_CORRELATION_SUBDIR")
AM_CONDITIONAL(include_rana, test -n "$GSL_RANA_SUBDIR")

FITSIO_LIBS="-lcfitsio -lm"
AC_SUBST(FITSIO_LIBS)
FITSIO_SUBDIR="fitsio"
KDE_CHECK_HEADER(fitsio.h, ,[FITSIO_SUBDIR=""] )
KDE_CHECK_LIB(cfitsio, fftopn, ,[FITSIO_SUBDIR=""], -lm )
AM_CONDITIONAL(include_fitsio_datasource, test -n "$FITSIO_SUBDIR")

AC_DEFUN([KST_CHECK_MDI],
[
  AC_MSG_CHECKING(whether to use kmdi lib from kdelibs)
  AC_CACHE_VAL(ac_cv_mdi_setup,
  [
    AC_LANG_SAVE
    AC_LANG_CPLUSPLUS
    save_CXXFLAGS="$CXXFLAGS"
    CXXFLAGS="$KDE_INCLUDES $QT_INCLUDES"

    AC_TRY_LINK([
      #include <kdeversion.h>
    ],
    [
      #if KDE_VERSION < ((3<<16) | (2<<8) | (2))
         KDE_choke me
      #endif
    ],
      ac_cv_mdi_setup=yes,
      ac_cv_mdi_setup=no
    )
    CXXFLAGS="$save_CXXFLAGS"
    AC_LANG_RESTORE
   ])

  AM_CONDITIONAL(include_libkstkmdi, test "$ac_cv_mdi_setup" = "no")
  if test "$ac_cv_mdi_setup" = "yes"; then
    LIB_KMDI="-lkmdi"
    KMDI_INCLUDES=""
    AC_MSG_RESULT(yes)
  else
    LIB_KMDI='$(top_builddir)/kst/src/libkstkmdi/libkstkmdi.la'
    KMDI_INCLUDES='-I$(top_srcdir)/kst/src/libkstkmdi'
    CXXFLAGS="$CXXFLAGS -DCOMPAT_KMDI"
    AC_MSG_RESULT(no)
  fi

  AC_SUBST(LIB_KMDI)
  AC_SUBST(KMDI_INCLUDES)
])

KST_CHECK_MDI

AC_DEFUN([KST_CHECK_JSE],
[
  AC_MSG_CHECKING(whether to use our own KJSEmbed)
  AC_CACHE_VAL(ac_cv_kjs_setup,
  [
    AC_LANG_SAVE
    AC_LANG_CPLUSPLUS
    save_CXXFLAGS="$CXXFLAGS"
    CXXFLAGS="$KDE_INCLUDES $QT_INCLUDES"
    save_LDFLAGS="$LDFLAGS"
    LDFLAGS="$LDFLAGS -L$ac_kde_libraries -lkjsembed"

    AC_TRY_LINK([
      #include <kdeversion.h>
      #include <kjsembed/jssecuritypolicy.h>
    ],
    [
      #if KDE_VERSION < ((3<<16) | (3<<8) | (89))
         KDE_choke me
      #endif
    ],
      ac_cv_kjs_setup=yes,
      ac_cv_kjs_setup=no
    )
    LDFLAGS="$save_LDFLAGS"
    CXXFLAGS="$save_CXXFLAGS"
    AC_LANG_RESTORE
   ])

  if test "$ac_cv_kjs_setup" = "yes"; then
    AC_MSG_RESULT(no)
  else
    AC_MSG_RESULT(yes)
  fi
])

KST_CHECK_JSE

AM_CONDITIONAL(include_kjse_internal, test "x$ac_cv_kjs_setup" = "xno")

KDE_CHECK_HEADER(linux/vt.h, AC_DEFINE(HAVE_LINUX, 1, [If we have a Linux platform]) have_linux=yes, , )
AM_CONDITIONAL(include_linux, test $have_linux = yes)

AC_ARG_WITH(kst-timers,
    AC_HELP_STRING([--with-kst-timers],[compile in timing information]),
    [
        AC_DEFINE(HAVE_KST_USE_TIMERS, 1, [Define if we should compile in timers])
    ])
AM_CONFIG_HEADER([kst/src/libkst/ksttimers.h])

AC_ARG_WITH(multicore-update,
    AC_HELP_STRING([--with-multicore-update],[use a multithreaded update subsystem]),
    [
        AC_DEFINE(MULTICORE_UPDATES, 1, [Define if we should use multicore updates])
    ])

AC_ARG_WITH(one-lock,
    AC_HELP_STRING([--with-one-lock],[build an effectively single-threaded Kst]),
    [
        AC_DEFINE(ONE_LOCK_TO_RULE_THEM_ALL, 1, [Define if we should build with only one mutex])
    ])

